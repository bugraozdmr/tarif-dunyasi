// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url      = env("DATABASE_URL")
}

// MODELS

enum UserRole{
  ADMIN
  USER
}


// USER MODEL RELATIONS
// google ile girersen password'un olmaz ondan zorunlu deil
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled    Boolean @default(false)

  recipes    Recipe[] @relation("RecipeToUser")

  // eslendi
  twoFactorConfirmation   TwoFactorConfirmation?
  //@@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  //@@map("accounts")
}

model VerificationToken{
  id             String   @id @default(cuid())
  email          String
  token          String @unique
  expires        DateTime

  // only 1 uniqe token 1 spesific email
  @@unique([email,token])
}

model PasswordResetToken {
  id             String   @id @default(cuid())
  email          String
  token          String @unique
  expires        DateTime
  
  @@unique([email,token ])
}

model TwoFactorToken {
  id             String   @id @default(cuid())
  email          String
  token          String @unique
  expires        DateTime
  
  @@unique([email,token ])
}

model TwoFactorConfirmation{
  id             String   @id @default(cuid())
  userId         String
  user           User @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@unique([userId])
}

// REST OF THE MODELS

model Recipe {
  id          String  @id @default(uuid())
  name        String
  userId      String
  user      User  @relation("RecipeToUser",fields: [userId],references: [id])

  isFeatured  Boolean @default(false)
  categoryId  String
  category    Category  @relation("CategoryToRecipe",fields: [categoryId],references: [id])
  images      Image[]
  

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([categoryId])
  @@index([userId])
}


model Category {
  id        String     @id @default(uuid())
  slug      String
  name      String
  description   String

  recipes    Recipe[] @relation("CategoryToRecipe")
}

// Recipe silinince resim ile iliskide gider yani resimde gider
model Image{
  id          String @id @default(uuid())
  recipeId   String
  product     Recipe @relation(fields: [recipeId],references: [id],onDelete: Cascade)
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([recipeId])
}